{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dummy Measurement Without Server"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## README"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "This is an example to illustrate how measurement notebooks could look like.\n",
    "Of course this is easy to convert to a script, if you prefer working with spyder, for example.\n",
    "\n",
    "Some things are not in a state yet that we're fully happy with, they're annotated correspondingly.\n",
    "\n",
    "**TODO:** the initialization could be in a separate script or notebook. That would be useful if multiple notebooks run measurements, for example."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "from pprint import pprint\n",
    "import time\n",
    "\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import h5py\n",
    "\n",
    "\n",
    "from qcodes import Instrument, Station, find_or_create_instrument\n",
    "from plottr.data import datadict_storage as dds, datadict as dd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "DATADIR = './data/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Create instruments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "**TODO:** here we would prefer getting the instruments from the server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "# Create a new station, close all previous instruments\n",
    "Instrument.close_all()\n",
    "station = Station()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": [
    "from instrumentserver.testing.dummy_instruments.rf import ResonatorResponse\n",
    "vna = find_or_create_instrument(ResonatorResponse, 'vna')\n",
    "station.add_component(vna)\n",
    "\n",
    "vna.resonator_frequency(5e9)\n",
    "vna.resonator_linewidth(10e6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connected to: None vna (serial:None, firmware:None) in 0.02s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'flux'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from instrumentserver.testing.dummy_instruments.rf import FluxControl\n",
    "flux = find_or_create_instrument(FluxControl, 'flux', 'vna')\n",
    "station.add_component(flux)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "## Example: Flux tuning a resonator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "true"
   },
   "source": [
    "### Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x145676afbe0>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXIAAAEFCAYAAAD+A2xwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAgQUlEQVR4nO3deXxU1f3/8ddnZrInJBEChH1XFEEkKopaVBRcW5fWajetLV3cuthvtdZ+rdWf7de2X2utbam11n5bta7UBXGpFFRcwr7LIkvYEraEJGQ/vz9mEibJZIGZZObC+/l48GCWO/eek9z7zplzzz3XnHOIiIh3+eJdABERiY6CXETE4xTkIiIepyAXEfE4BbmIiMcF4rHRXr16uSFDhsRj0yIinrVgwYJdzrm8lq/HJciHDBlCYWFhPDYtIuJZZrYp0uvqWhER8TgFuYiIxynIRUQ8TkEuIuJxCnIREY9TkIuIeJyCXETE4xTkIh5SXVfPM4Vb0PTTEi7qC4LMLBWYC6SE1vesc+6/o12viLT2mzfX8sic9WSlBpg2Jj/exZEEEYsrO6uBc51z5WaWBLxjZrOcc+/HYN0iEmZvZQ0Aeypq41wSSSRRB7kLfscrDz1NCv3T9z6RLhDwBXtDa+sb4lwSSSQx6SM3M7+ZLQaKgTeccx9EWGa6mRWaWWFJSUksNity1An4DVCQS3MxCXLnXL1z7iRgAHCqmY2JsMwM51yBc64gL6/V5F0i0gnJ/uAhW9egL71yUExHrTjn9gFzgGmxXK+IBCWFgry2Ti1yOSjqIDezPDPLCT1OA6YAq6Ndr4i0pq4ViSQWo1bygb+amZ/gH4Z/OudejsF6RaSFpha5ulYkTCxGrSwFxsegLCLSgaTGFrm6ViSMruwU8ZDG4Yc62SnhFOQiHpIU0DhyaU1BLuIhST6d7JTWFOQiHhJoHEder64VOUhBLuIhTSc71UcuYRTkIh7i92nUirSmIBfxIPWRSzgFuYgHqWtFwinIRTxIXSsSTkEu4iGNd3ira1CQy0EKchEPqtXwQwmjIBfxIJ3slHAKchEPaWyHK8glnIJcxIN0ZaeEU5CLeFCtTnZKGAW5iIe40LCV2jq1yOUgBbmIB2n4oYRTkIt4UI0uCJIwCnIRD9IdgiScglzEgzRqRcIpyEU8qEbjyCWMglzEQ5wa4hKBglxExOMU5CIiHqcgF/EQh/pWpLWog9zMBprZ22a2ysxWmNmtsSiYiIh0TiAG66gDvu+cW2hmWcACM3vDObcyBusWEZEORN0id85td84tDD3eD6wC+ke7XhFpLXzUSoMuCpKQmPaRm9kQYDzwQYT3pptZoZkVlpSUxHKzIkclzYAojWIW5GaWCTwHfMc5V9byfefcDOdcgXOuIC8vL1abFTlq6XZv0igmQW5mSQRD/O/OuedjsU4RaS28a6VWE2dJSCxGrRjwZ2CVc+7X0RdJRDpDt3uTRrFokU8CvgSca2aLQ/8uisF6RaQdmm9FGkU9/NA59w5gMSiLiHQgvFdcMyBKI13ZKeJR6lqRRgpyEY9S14o0UpCLeIgLG7ai271JIwW5iEdV1SrIJUhBLuJR1XX18S6CJAgFuYiHhI9TUYtcGinIRTxKLXJppCAX8aiqWgW5BCnIRbwkrG+lWqNWJERBLuJRB2rUIpcgBbmIR1UoyCVEQS7iIeE3X66orotjSSSRKMhFPKq8SkEuQQpyEQ9KS/JTXqMglyAFuYgHZaQE1CKXJgpyEQ9pnDMrKzWgPnJpoiAX8aDMlADlCnIJUZCLeJCCXMIpyEU8pHHwYWaqglwOUpCLeFBmivrI5SAFuYgHpSX7qa13um+nAApyEU9pHLWSkewHoFKX6QsKchFPSksOAJo4S4IU5CIelN7UIlc/uSjIRTylcdKsxq6VA7q5hBCjIDezx8ys2MyWx2J9ItK+HmlJAOyrrI1zSSQRxKpF/jgwLUbrEpEO5GenAbBt34E4l0QSQUyC3Dk3F9gTi3WJSNsaR63kZ6cCsL20Ko6lkUTRbX3kZjbdzArNrLCkpKS7NityREpJ8tEzI5ntpWqRSzcGuXNuhnOuwDlXkJeX112bFTli5eeksm2fWuSiUSsinuLCHudnp6lFLoCCXMSTDKNfdirb1SIXYjf88ElgPnCsmRWZ2Q2xWK+ItC0/J4391XXsr9IQxKNdIBYrcc5dE4v1iEgH3MHOlX45wSGI20uryEpNileJJAGoa0XEg8ygX2gIosaSi4JcxKPyw1rkcnRTkIt4SPiolT5ZKfgMtqtFftRTkIt4kAEBv4/eWalsU4v8qKcgF/GwfjmpbN2rFvnRTkEu4iHONX8+pFcGG3dXxKcwkjAU5CIeZGYAjO7bg+2lVbyzdlecSyTxpCAX8bBLxuUDMG+tJqI7minIRTzEtehbyc9OIz87lT0VNXEqkSQCBbmIB1nY49z0ZAX5UU5BLuJxAb/x1upidpVXx7soEicKchEPcRFe27grOGrl+YVF3VsYSRgKchEPsrC+lee/fQYAS7aUxqk0Em8KchGPG9E7i88VDOCVZdv52/yN8S6OxIGCXMRDWl4Q1OiM4b0AuGvmCvZV6sTn0UZBLuJB1mzcCkw9oW/T45/MXMHMxVu7u0gSRwpykSNAWrKfK8b3B+BfS7Zx61OL2by7Ms6lku6iIBfxkDZ6VgD49dUn8YOpxzY9v/XpRSwt2tflZZL4U5CLeJFFfvnbk4c3PV60eR+XPfwupQd0T88jnYJc5AhiZrx92+Rmr4376etc/si7fOWxDynZr4uGjkQKchEPaTnXSiRDe2Xw9m2Tefja8U2vLdq8j/98XMIp971J0d5KZi7eSkV1XVcWVbpRIN4FEJFDZ210rTQa2iuDob0yyElL5ot//qDZe2f+4u2mxxt/fjHPLShiQG4aG3ZVcM2pg1iyZR8HauuZOKxnVxRduoCCXOQINnHYMXzj7GFcOq4f/XPSGP+zN5q9f/xPXqOypr7p+ZY9lTwyZz0Ad196PNdNGkpNXQPJAR919Q0U7T1Aeoqf3lmpbW5zT0UN9Q2OvKyUrqmUtKIgFzmCBfw+7rhodNPzK07uz/MLt3LF+P48v2hrsxAHmkIc4O6XVjJr+Q4++GRPq/XedsEobjp3JNv2HWDe2hK27aviN2+t5S/XncL1j38EBFv7VbX13PPySr4zZWTE8N9XWcNj727kujOGkJbkJy3ZH6uqt7K0aB9j+mXj83XwdcaDrDN9bh2uxGwa8BvADzzqnPt5e8sXFBS4wsLCqLcrcrR5dN4G7n1lFcvuvoCs1KTDXk/J/moemL2afxZ23URbVxcM5OnCLU3PLz4xn199bhybdlcyZ00x8zfsZs6a5jfEeHr6RD4uLuefH21h2dZSxg3M4enpEymrqiU7LYkn3tvE/A27+dVnxzFz8VZOHJBNWlKAix6ax+Xj+5PkN/r2SGX5tjL+vbqYZ795OuMH5fI/r63mj3M38NPLTuArZwxp2p5zDjPDOcfsFTt5fmERr6/cycs3n8mY/tnc+/JKlm4t5cIxfdlbUcPnThlI76xUkvyGmVF6oJYbHv+IH108mpMH5bJpdwXrS8o597g+zepVXFbF+pIK/v7BJh76/PjD/mNiZguccwWtXo82yM3MD3wMnA8UAR8B1zjnVrb1mWiCfH9VLenJAeatLeHskXkRfyANDY69lTVU1zWQnZZERkqA2voGfjJzOdPPHs7QXhnNli8uq6J3j7a/KransqaOvZW19M9JA2BHaRU3P7mQX1w5lmF5ma2Wr66rp6auoVMH4Z6KGo7JSAaC9e7oM6UHatlZVsWoPlmHUZPIdoemRu2Zqa/JiSBWQd7o/ldXkZkSwOcLhlJxWRXXTRrKgNw0Cu598+ByV5zIHc8vi3p78TB2QDZLiw5OKPbdKaPYtKeCZUWlrC0u5/RhPTlt2DE8+ObaZp+77owhPP7exlbr65WZwq7yaiaN6Mm763Y3vX7B8X14feXOpufJAR9j+2czqGc6zy88eKXtgh9POezjqSuD/HTgbufc1NDzOwCcc/e39ZnDDfKZi7dy61OLuXRcP15asg2A3lkp5GenMm1MPnsqqslOS+KXr398cFuDc/nL9aewtKiULzwaPOlz4znDqaiuJ+AztuytZPaKndz7mTF8ceJgnHPMX7+bv3+4mU+NzOOVZdsZnpdJ3+wUrp80lE8//C4rt5dxydh8rp80lDtfWMbqHfsBmHZCX15bsaNVuf/5jdN5pnALYwdkc9fMFU3LXjQ2n6E9M1hbvJ/v/XMJL910Jk/M38j3LhjFhpIKvvDoB/zqs+NISfJx0z8W8devnsrwvAwG5KZTWVPHlj0HeOqjzfzl3Y3cfO4IniksYkdZFTO+NIELTujLL2evYc7HxXz/gmM5tk8Wv/33WjbvqWTCoFwyUgLcP2s1r95yFqP6ZLKkaB8TBh8DwMtLt5GdlsTA3HQm/3IOAD++eDRXnzKQJL+P1KSDX38fmbMO5+CB2Wv43bUnc+eLywj4jMIfn8/f3t/E0J4ZnDmyFw0NjrXF5RTtrWRpUSnfmTKy6b6TAGVVtWQmB9iyt5Kc9GQmP/A2U0/oy12XHE9GSoC6+gb+OHcDZ43sxYuLtvGd80fy4BtrOb5fD3pnpXD2qLxmP/MDNfW8vnIHl47tx/qScgb1TCcl0HVf27vLn+Zu4L5XYxfk7Zm3toTH393IW6uL+ejOKVTW1NGnRyopAR/ff2YJzy/cykPXjKd3VgqPzvuEN1ftbHNdQ3qms7GNK03HDcxhyZZ9XVSLxPP6d88+7MZWVwb5VcA059zXQs+/BJzmnLupxXLTgekAgwYNmrBp06ZD3tbVf5wfsb9OopOVGmB/VR1fmjiY5xYWteo3bemqCQMor6rj4+L9bCjp+A7uT359Itf86f1mr53QrwcrtpU1e+24vllNfxTDjRuYw7gB2Twx/+A+Y9Z8AqnfXXsyv//POr542mBG9c1iwca93PfqKn4w9VgemL2Gz58ykOsnDeVnL6/k5MG5fHvycEr2V9MzM5nnFm6lZH81g49JZ31JOd87fxQBv4/y6joykv3N/uDEW2OQL//pVDJTuv4UV119A5v2VDI8wrfLhgbX6htxXX0Dfp+xZc8B7nxxGfPW7uK5b53OhMHHULhxDz98bimTRvTipnNG8MEne+idlcLiLfu4f9bqpnX87tqTyU1P4unCLeSmJ/P4extJDvioqWvosLzD8zJYH9on87JSYjJufuU9U7n9uWX8K9R4bGnK6D7t/hFrlJ7sp7Kmnn987TTOGNHrsMrSlUH+WWBqiyA/1Tl3c1ufOdwWeVVtPVf/cT5LihJ73uUeqQHKqjRG90hx9qg8dpQeYG1xOZ+bMJAx/XswcVhPlm8rZc6aEjJSAtz76TGtQq2ypo6K6vqYjt7o7iDvDnX1DcxZU0JmaoDkgI+TB+VGXG5DSTmZqQF6pCaR7Pfx5EebKdy4lwmDc8lKDfDpk4JzzbywqIi5H+/i3s+Moa7eMe6e1xnVJ5O/fvVU8rPTuH/WKjaUVHDNqQNZvWM/m3dX8tRHW7ji5P4cn9+D3PRk1pWUc+GYvhyf34OA30d1XT1Few+waPM+bntmCQCnDj2GW84dyYTBuXz9iULeWbeLl28+k8yUAA/MXsMry7aTmuSjqjb4B2j+HecyY+4Grj11ECMTsEXebV0rjd5Zu4vZK3ZQUVPHBxv2cOt5Izlt2DFkpAS4/bll3H7hsWwvrWLFtjLeXbeLFdvK2FNRw9fOHMqj73wCwC3njWT19jL2VtZwydh+fOWMIby0ZBsZKX6eXVDE984fxZRfzwXgixMH0ScrlW2lVUwZ3ZuemSl8+MluemWmUFFTT4rfx8rtZXz7nOGs3FbGaUN78qvX1zRtq9Et547gCxMHU7K/muVbS8lJT2ZnWRX9ctL4+hPBn8dxfbMor66jaO8BAj7jy6cPwWcwpn8276zbxZTRfThlSC656cnc8/JKivZW8uaqYgCe/ebp1DU4Pj+jeesX4FuTh/P70IiEV285i/1VtVwdYblGWakBzjuuN0l+H88saH1CLD87le2lVVwyNp+3VhVzoDbYih/RO5NNuyuorW+9X501shfz1u5q9frEYcfw/obm37SumjCAZ0PbPWN4T95bv5uTBuawOIG/gl958gBOGZLLlRMGkOT38a3/W8Cs5TtYec9U0pNjE7oz5q7n/726+ogK8q62rng/fXqkttsVVVlTR1pSx9++nHO8vaaYnhkpnNj/4AgY5xz7KmvJDZ3TalRb38DIO2dxdcFAfnHV2Kjr0pVBHiB4svM8YCvBk53XOudWtPWZeI5aeW/dLsYPyu3UMKet+w6Qm54U9UG4s6yKypr6VidZwznnWLa1lLEDcprOpHfWpt0VfLKrgsnH9gagpq6BA7X1ZKclsbeihtTQsK6Zi7fy2LsbeeYbp5Mc8DHk9lcY2TuTF2+chN9n7CqvZu3Ocv7zcQl3X3ZCU7nqGxwj7pzFTeeM4NYpI0nyN78guK6+gRF3zqJnRjIL7jqf6rp6Aj4fPoONuytZuGkvV04YAMDTH21mRO8sjs/vwaLNezlpUA7pyQFq6hpwOHaUVrF6x36mntCX15bvICs1wKSwr6EPzF7N795ez8jemfzootFs2FVB/5w0bnlqEd84exi//fc6jslIpq6+oelbUeMfAoCLx+Zz4+QRVNXVc8Uj7wHw/h3nMfH+tzr98z5Ut5w3kvzsVC4f35+dZVX0z0kj4D+8i6obg3zFT6eSoSD3hL0VNWSlBg77dx6uy4I8tPKLgAcJDj98zDl3X3vLa/hhYthTUROzsbvbSw+QnhQgO71rT8B15KONexg3IIfkgI/ZK3bw53c+4f4rTmRIzwzqG1zTsDGArzz2IeuKy3n39nNxzrG7ooZnCotYV1zOA1eN5a3Vxfx81ir+dsNpbC89wJod5Vx72iCcczy7oIg+PVK58R8L2X+I3WgjemcS8Bkv3XwmeypqyElP6vSJWAX50a1Lg/xQKcglURzqt5/2LN9aihlc/NA7AHz59MFU1zY0G0sd7mefGcNdLy7n0nH9+O014yMu09If/7Oe+2cpyI9WbQW59gQ5qsVyRMqY/tlAsKsm4Dd6hcYKnzWqFzf9YxGfGpVH3x6pTcF+14vLAXhpyTZ+ceWJh9SFl0ADaSQBKMhFYqxvdvOLyy4ak8+8/8ph4DHpAPxg2rH87u11/OXdjU3L/O8bH3P7haPxH4GXj0vX0zS2Il3M57OmEIfglYG3X3gcP754NMf1zaJfdip/mvcJw3/0Ku9EGNUTrvs7QsULFOQicZAS8PO1s4bx2nfO5oUbJ3Fc3+C44i/++QPueH5phxeytLz5shzdFOQicdanRyqzbj2L844LDh998sMtPPTW2g4+JXKQglwkAZgZl53Ur+n5396PPIVFHAaZiQcoyEUSxLQxffnGp4Y1Pa+qbXvOG41akXAKcpEEkRLwc8eFozkzdCXrT19q8+JokWYU5CIJpvHGB09+uIX563c3e89p3IpEoCAXSTDnH9+Hkb2D08be8NeP4lwa8QIFuUgCeunmMwHoF7rzlEh7FOQiCSg1yc8lY/NZV1zOzMUHbxOmUSsSiYJcJEH1zw22xn/zZusx5Rq1IuEU5CIJ6rtTRgHE9A5DcmRSkIskqMbulc17KmloUJ+KtE1BLpLAzhrZi+2lVaza0fxG1ZprRcIpyEUS2KlDewKwYltZB0vK0UxBLpLA+oeGH763Lji9bTzu6CWJT0EuksCSA8FD9MXF25q9rlErEk5BLpLgemUmx7sIkuAU5CIJ7qtnDgXanw1Rjm4KcpEEl52WBMC+ylpd2SkRKchFElx+6GbOm/dUNr2mLnIJpyAXSXCj83sAsGbn/jiXRBKVglwkwfXOSsXvM3aUHtBs5BJRVEFuZp81sxVm1mBmBbEqlIgc5PcZvbNS2FFa3fSaafyhhIm2Rb4cuAKYG4OyiEgb+vRIZWdZVbyLIQkqEM2HnXOrQK0Dka7Wt0cq60rKNWpFIuq2PnIzm25mhWZWWFJS0l2bFTki5GWlsLs8rGsljmWRxNNhi9zM3gT6RnjrTufczM5uyDk3A5gBUFBQoHaFyCHITA1QUa0LgiSyDoPcOTelOwoiIm3LTAlQU99ATb3CXFrT8EMRD8hMCba5yqvqAE2aJc1FO/zwcjMrAk4HXjGz2bEploiEywgF+f7qujiXRBJRtKNWXgBeiFFZRKQNLVvkIuHUtSLiAU1BXt3YtaK+FTlIQS7iARkpfgAq1LUiESjIRTwgK1V95NI2BbmIB2Soj1zaoSAX8YCWfeQi4RTkIh6QkRwM8soaXRAkrSnIRTzA5zMykoMnPDVgRVpSkIt4RGM/uUhLCnIRj8hUkEsbFOQiHpEZGoKonhVpSUEu4hGNJzxFWlKQi3hEY4tcpCUFuYhHNPaRa54VaUlBLuIRjfOtiLSkIBfxiGS/glwiU5CLeERyIHi4qmNFWlKQi3hEsj8Y4bpzubSkIBfxiMYWeX2DolyaU5CLeESSX4erRKY9Q8QjGlvkIi1pzxDxCLXIpS3aM0Q8IllBLm3QniHiEepakbZozxDxCHWtSFu0Z4h4hFrk0pao9gwze8DMVpvZUjN7wcxyYlQuEWkhya9rOiWyaP/EvwGMcc6NBT4G7oi+SCISiVrk0pao9gzn3OvOubrQ0/eBAdEXSUQi0agVaUss94yvArPaetPMpptZoZkVlpSUxHCzIkcHtcilLR3ecsTM3gT6RnjrTufczNAydwJ1wN/bWo9zbgYwA6CgoECTRYgcIo1akbZ0GOTOuSntvW9mXwEuAc5zzimgRbqIglzaEtVNAM1sGvBD4FPOucrYFElEIklR14q0Ido942EgC3jDzBab2R9iUCYRiUAtcmlLVC1y59yIWBVERNqnk53SFu0ZIh6hC4KkLQpyEY9Qi1zaoj1DxCOSfDpcJTLtGSIe4fOpa0UiU5CLiHicglxExOMU5CIiHqcgFxHxOAW5iIjHKchFRDxOQS4i4nEKchERj1OQi4h4nIJcRMTjFOQiIh6nIBcR8TgFuYiIxynIRUQ8TkEuIuJxCnIREY+L6ubLItK9/nXTJJYUlca7GJJgFOQiHjJ2QA5jB+TEuxiSYNS1IiLicQpyERGPU5CLiHhcVEFuZj8zs6VmttjMXjezfrEqmIiIdE60LfIHnHNjnXMnAS8DP4m+SCIiciiiCnLnXFnY0wzARVccERE5VFEPPzSz+4AvA6XAOe0sNx2YDjBo0KBoNysiIiHmXPuNaDN7E+gb4a07nXMzw5a7A0h1zv13RxstKChwhYWFh1pWEZGjmpktcM4VtHq9oyA/hA0MBl5xzo3pxLIlwKbD3FQvYNdhfjbRqC6J50ipB6guiSqaugx2zuW1fDGqrhUzG+mcWxt6ehmwujOfi1SQQ9hmYaS/SF6kuiSeI6UeoLokqq6oS7R95D83s2OBBoIt7G9GXyQRETkUUQW5c+7KWBVEREQOjxev7JwR7wLEkOqSeI6UeoDqkqhiXpeYnewUEZH48GKLXEREwijIRUQ8LqGD3Mz8ZrbIzF6O8J6Z2UNmti40cdfJ8ShjZ3RQjy+Eyr/UzN4zs3HxKGNntVeXsGVOMbN6M7uqO8t2qDqqi5lNDk0It8LM/tPd5TsUHexj2Wb2kpktCdXl+niUsTPMbKOZLQv93FtdNeiV474T9YjpcZ/odwi6FVgF9Ijw3oXAyNC/04Dfh/5PRO3V4xPgU865vWZ2IcETIYlaD2i/LpiZH/gFMLs7C3WY2qyLmeUAjwDTnHObzax3N5ftULX3e7kRWOmcu9TM8oA1ZvZ351xNt5aw885xzrV1wYyXjvv26hHT4z5hW+RmNgC4GHi0jUU+DTzhgt4Hcswsv9sK2Ekd1cM5955zbm/o6fvAgO4q26HqxO8E4GbgOaC4Wwp1mDpRl2uB551zmwGccwlbn07UxQFZZmZAJrAHqOum4sWaJ477jsT6uE/YIAceBP6L4MVGkfQHtoQ9Lwq9lmgepP16hLsBmNWlpYnOg7RTFzPrD1wO/KEby3S4HqT938soINfM5pjZAjP7creV7NA9SPt1eRgYDWwDlgG3Ouc6sz/GgwNeD/3Mp0d43yvHfUf1CBf1cZ+QQW5mlwDFzrkF7S0W4bWEGkvZyXo0LnsOwV/oD7u8YIehk3V5EPihc66+e0p1eDpZlwAwgWBLdypwl5mN6o7yHYpO1mUqsBjoB5wEPGxmEbvGEsAk59zJBLtQbjSzs1u8n/DHfUhH9QBid9wnZJADk4DLzGwj8BRwrpn9X4tlioCBYc8HEGxxJJLO1AMzG0vwa/GnnXO7u7eIndaZuhQAT4WWuQp4xMw+052F7KTO7l+vOecqQv2cc4FEPBHdmbpcT7CbyDnn1hHsnz2ue4vZOc65baH/i4EXgFNbLOKF474z9Yjtce+cS+h/wGTg5QivX0zw64gBE4EP413Ww6zHIGAdcEa8yxhtXVos8zhwVbzLGsXvZTTwFsGWeTqwHBgT7/IeZl1+D9wdetwH2Ar0ind5I5QzA8gKe/wewZPN4csk/HHfyXrE9LhP9FErzZjZNwGcc38AXgUuIvjDqCTY6vCEFvX4CdCTYOsVoM55aJa3FnXxtPC6OOdWmdlrwFKCfc+POueWx7WAh6DF7+VnwONmtoxgAP7QtT2aIp76AC+EjoMA8A/n3GsePO47U4+YHve6RF9ExOMStY9cREQ6SUEuIuJxCnIREY9TkIuIeJyCXESki5nZY2ZWbGYdjnwys8Fm9lZoQq05oSkY2qUgFxHpeo8D0zq57C8JziczFrgHuL+jDyjIRUS6mHNuLsHJypqY2XAzey00H8s8M2u82vZ4ghejAbxNcKKwdinIRUTiYwZws3NuAnAbwWmTAZYAjTe2v5zgzJU921uRp67sFBE5EphZJnAG8Ezoyk6AlND/txGc2Ow6gnP8bKWDaYcV5CIi3c8H7HPOndTyDReccOsKaAr8K51zpR2tTEREupFzrgz4xMw+C023sBsXetzLzBqz+Q7gsY7WpyAXEeliZvYkMB841syKzOwG4AvADWa2BFjBwZOakwneju9jghNw3dfh+jVploiIt6lFLiLicQpyERGPU5CLiHicglxExOMU5CIiHqcgFxHxOAW5iIjH/X88/HfyEa+hUgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# just acquire a trace and plot. The resonance frequency should change when changing the flux.\n",
    "vna.start_frequency(4e9)\n",
    "vna.stop_frequency(5.2e9)\n",
    "vna.npoints(1201)\n",
    "vna.bandwidth(1e4)\n",
    "vna.power(-50)\n",
    "flux.flux(0)\n",
    "\n",
    "f_vals = vna.frequency()\n",
    "s11_vals = vna.data()\n",
    "\n",
    "fig, ax = plt.subplots(1, 1)\n",
    "ax.plot(f_vals, np.angle(s11_vals))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "### Measurement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "false"
   },
   "source": [
    "#### Basics\n",
    "\n",
    "This is a very simple example for how to use DDH5Writer to save data to hdf5.\n",
    "The basic structure is:\n",
    "\n",
    "1. specify the structure of the data. This is required for two reasons: A, knowing the data structure before actually running measurement code allows to pre-define objects in the data files, which is important for accessing the data from multiple programs (single-writer multi-reader support). B, for all features in live-plotting and analysis to work we need to know the relations between different data objects (like dependent and independent data). \n",
    "\n",
    "2. use the Writer as context manager to add data (in practice, in some kind of measurement loop). \n",
    "\n",
    "\n",
    "#### Live plotting\n",
    "\n",
    "You can use `plottr` to live plot the data (or plot it later). An easy way to do this is by running the `monitr` app from the command line. This assumes that plottr is installed through pip, which should create the required launcher script. Run (and replace ``<datadir>`` with your data directory root):\n",
    "\n",
    "``\n",
    "    $ plottr-monitr <datadir>\n",
    "``\n",
    "\n",
    "You should see the monitr window open. On the left you will see all data files in your data directory. If you select a data file, the right hand side will display the contents of that file. you can plot data by right-clicking on a top-level group container and selecting 'Plot ``<group>``'.\n",
    "\n",
    "If you activate the ``Auto-plot new`` button in the toolbar, any new data files appearing from this point on will be plotted automatically. The default refresh rate for the monitr app is 2 seconds (can be set a startup as a command line option).\n",
    "\n",
    "\n",
    "### Notes\n",
    "\n",
    "**TODO:** This is using the bare file writer. Some things, like setting up the data structure will be made easier, but the new measurement structures are will work in progress.\n",
    "\n",
    "**TODO:** This isn't saving meta data yet, or copying additional files. An easy way to circumvent that for the time being is by inheriting from the DDH5 writer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'str' object has no attribute 'add_meta'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8924/182832018.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m# this is just for catching mistakes.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 9\u001b[1;33m \u001b[1;32mwith\u001b[0m \u001b[0mdds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDDH5Writer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mDATADIR\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'FluxSweep'\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mwriter\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     10\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mflux_val\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m101\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m         \u001b[0mflux\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mflux\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mflux_val\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\msmt\\documents\\github\\plottr\\plottr\\data\\datadict_storage.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, datadict, basedir, groupname, name, filename, filepath)\u001b[0m\n\u001b[0;32m    547\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfile\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mOptional\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mh5py\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    548\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 549\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatadict\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd_meta\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'dataset.name'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    550\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    551\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__enter__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;34m\"DDH5Writer\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'str' object has no attribute 'add_meta'"
     ]
    }
   ],
   "source": [
    "# this is defining the data structure.\n",
    "data = dd.DataDict(\n",
    "    flux = dict(unit='Phi0'),\n",
    "    frequency = dict(unit='Hz'),\n",
    "    s11 = dict(axes=['flux', 'frequency']), # no unit, complex.\n",
    ")\n",
    "data.validate() # this is just for catching mistakes.\n",
    "\n",
    "with dds.DDH5Writer(DATADIR, data, name='FluxSweep') as writer:\n",
    "    for flux_val in np.linspace(-1,1,101):\n",
    "        flux.flux(flux_val)\n",
    "        time.sleep(0.2)\n",
    "        \n",
    "        # the writer accepts one line for each data field.\n",
    "        # that means we should reshape the data that each entry has the form [<data>].\n",
    "        # for practical purposes that means that each frequency and s11 data array\n",
    "        # is like one datapoint.\n",
    "        writer.add_data(\n",
    "            flux = [flux_val],\n",
    "            frequency = vna.frequency().reshape(1,-1),\n",
    "            s11 = vna.data().reshape(1,-1),\n",
    "        )\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "Collapsed": "true"
   },
   "source": [
    "#### Inspecting the data\n",
    "\n",
    "This is just to illustrate how to open and look at the data. You often would not actually do that in the measurement notebook.\n",
    "\n",
    "Note that the data is currently also in the memory. **TODO**: an operation mode for not keeping the data in the memory is not implemented yet.\n",
    "\n",
    "To illustrate, we look at the data in the memory, and compare with the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'flux': {'axes': [], 'label': '', 'unit': 'Phi0'},\n",
      " 'frequency': {'axes': [], 'label': '', 'unit': 'Hz'},\n",
      " 's11': {'axes': ['flux', 'frequency'], 'label': '', 'unit': ''}}\n",
      "{'flux': (0,), 'frequency': (0,), 's11': (0,)}\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "index -1 is out of bounds for axis 0 with size 0",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8924/3443965536.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;31m# this is detecting the grid in the data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mdata_as_grid\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatadict_to_meshgrid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mpprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata_as_grid\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstructure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mpprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata_as_grid\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshapes\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\msmt\\documents\\github\\plottr\\plottr\\data\\datadict.py\u001b[0m in \u001b[0;36mdatadict_to_meshgrid\u001b[1;34m(data, target_shape, inner_axis_order, use_existing_shape)\u001b[0m\n\u001b[0;32m   1201\u001b[0m     \u001b[1;31m# guess what the shape likely is.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1202\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mtarget_shape\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1203\u001b[1;33m         \u001b[0mshp_specs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mguess_shape_from_datadict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1204\u001b[0m         shps = set(order_shape[1] if order_shape is not None\n\u001b[0;32m   1205\u001b[0m                    else None for order_shape in shp_specs.values())\n",
      "\u001b[1;32mc:\\users\\msmt\\documents\\github\\plottr\\plottr\\data\\datadict.py\u001b[0m in \u001b[0;36mguess_shape_from_datadict\u001b[1;34m(data)\u001b[0m\n\u001b[0;32m   1156\u001b[0m             \u001b[0maxdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdata_vals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1157\u001b[0m             \u001b[0maxes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maxdata\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1158\u001b[1;33m         \u001b[0mshapes\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0md\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnum\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mguess_grid_from_sweep_direction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1159\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1160\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mshapes\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\msmt\\documents\\github\\plottr\\plottr\\utils\\num.py\u001b[0m in \u001b[0;36mguess_grid_from_sweep_direction\u001b[1;34m(**axes)\u001b[0m\n\u001b[0;32m    254\u001b[0m         \u001b[1;31m# first step: find repeating patterns in the data.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    255\u001b[0m         \u001b[1;31m# record for each dimension in which interval it repeats.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 256\u001b[1;33m         \u001b[0mperiod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfind_direction_period\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvals\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mignore_last\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    257\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mperiod\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    258\u001b[0m             \u001b[0mnames_list\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\msmt\\documents\\github\\plottr\\plottr\\utils\\num.py\u001b[0m in \u001b[0;36mfind_direction_period\u001b[1;34m(vals, ignore_last)\u001b[0m\n\u001b[0;32m    190\u001b[0m              \u001b[0mthe\u001b[0m \u001b[0mmore\u001b[0m \u001b[0mcommon\u001b[0m \u001b[0mdirection\u001b[0m \u001b[1;32mis\u001b[0m \u001b[0mchanged\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    191\u001b[0m     \"\"\"\n\u001b[1;32m--> 192\u001b[1;33m     \u001b[0mswitches\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_find_switches\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvals\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    193\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    194\u001b[0m     \u001b[1;31m# if there's no switch at all, no period is defined.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\msmt\\documents\\github\\plottr\\plottr\\utils\\num.py\u001b[0m in \u001b[0;36m_find_switches\u001b[1;34m(arr, rth, ztol)\u001b[0m\n\u001b[0;32m    151\u001b[0m     \u001b[0marr_\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mis_invalid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    152\u001b[0m     \u001b[0mdeltas\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0marr_\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0marr_\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 153\u001b[1;33m     \u001b[0mhi\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m~\u001b[0m\u001b[0mis_invalid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m100.\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mrth\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    154\u001b[0m     \u001b[0mlo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m~\u001b[0m\u001b[0mis_invalid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrth\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    155\u001b[0m     \u001b[0mdiff\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mabs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mhi\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mlo\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mpercentile\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;32m~\\Miniconda3\\envs\\qcodes\\lib\\site-packages\\numpy\\lib\\function_base.py\u001b[0m in \u001b[0;36mpercentile\u001b[1;34m(a, q, axis, out, overwrite_input, interpolation, keepdims)\u001b[0m\n\u001b[0;32m   3865\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0m_quantile_is_valid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mq\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3866\u001b[0m         \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Percentiles must be in the range [0, 100]\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3867\u001b[1;33m     return _quantile_unchecked(\n\u001b[0m\u001b[0;32m   3868\u001b[0m         a, q, axis, out, overwrite_input, interpolation, keepdims)\n\u001b[0;32m   3869\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Miniconda3\\envs\\qcodes\\lib\\site-packages\\numpy\\lib\\function_base.py\u001b[0m in \u001b[0;36m_quantile_unchecked\u001b[1;34m(a, q, axis, out, overwrite_input, interpolation, keepdims)\u001b[0m\n\u001b[0;32m   3984\u001b[0m                         interpolation='linear', keepdims=False):\n\u001b[0;32m   3985\u001b[0m     \u001b[1;34m\"\"\"Assumes that q is in [0, 1], and is an ndarray\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3986\u001b[1;33m     r, k = _ureduce(a, func=_quantile_ureduce_func, q=q, axis=axis, out=out,\n\u001b[0m\u001b[0;32m   3987\u001b[0m                     \u001b[0moverwrite_input\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0moverwrite_input\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3988\u001b[0m                     interpolation=interpolation)\n",
      "\u001b[1;32m~\\Miniconda3\\envs\\qcodes\\lib\\site-packages\\numpy\\lib\\function_base.py\u001b[0m in \u001b[0;36m_ureduce\u001b[1;34m(a, func, **kwargs)\u001b[0m\n\u001b[0;32m   3562\u001b[0m         \u001b[0mkeepdim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3563\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3564\u001b[1;33m     \u001b[0mr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3565\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkeepdim\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3566\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Miniconda3\\envs\\qcodes\\lib\\site-packages\\numpy\\lib\\function_base.py\u001b[0m in \u001b[0;36m_quantile_ureduce_func\u001b[1;34m(***failed resolving arguments***)\u001b[0m\n\u001b[0;32m   4096\u001b[0m                 \u001b[0mindices_below\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindices_above\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4097\u001b[0m             )), axis=0)\n\u001b[1;32m-> 4098\u001b[1;33m             \u001b[0mn\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0map\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4099\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4100\u001b[0m             \u001b[1;31m# cannot contain nan\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: index -1 is out of bounds for axis 0 with size 0"
     ]
    }
   ],
   "source": [
    "# when we look at the data now, we see it's not on a grid, even though we want the data to be.\n",
    "pprint(data.structure())\n",
    "pprint(data.shapes())\n",
    "\n",
    "# this is detecting the grid in the data\n",
    "data_as_grid = dd.datadict_to_meshgrid(data)\n",
    "pprint(data_as_grid.structure())\n",
    "pprint(data_as_grid.shapes())\n",
    "\n",
    "flux_data = data_as_grid.data_vals('flux')\n",
    "frq_data = data_as_grid.data_vals('frequency')\n",
    "s11_data = data_as_grid.data_vals('s11')\n",
    "\n",
    "fig, ax = plt.subplots(1, 1)\n",
    "\n",
    "ax.imshow(\n",
    "    np.angle(s11_data.T), \n",
    "    aspect='auto', origin='lower',\n",
    "    extent=[flux_data.min(), flux_data.max(), frq_data.min(), frq_data.max()]\n",
    ")\n",
    "ax.set_xlabel('Flux (phi_0)')\n",
    "ax.set_ylabel('Frequency (Hz)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'writer' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8924/3688273529.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# Loading from file is essentiall the same thing:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mdata_from_file\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdds\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatadict_from_hdf5\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mwriter\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mdata_as_grid\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdatadict_to_meshgrid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata_from_file\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mflux_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata_as_grid\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdata_vals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'flux'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'writer' is not defined"
     ]
    }
   ],
   "source": [
    "# Loading from file is essentiall the same thing:\n",
    "data_from_file = dds.datadict_from_hdf5(writer.file_path)\n",
    "data_as_grid = dd.datadict_to_meshgrid(data_from_file)\n",
    "\n",
    "flux_data = data_as_grid.data_vals('flux')\n",
    "frq_data = data_as_grid.data_vals('frequency')\n",
    "s11_data = data_as_grid.data_vals('s11')\n",
    "\n",
    "fig, ax = plt.subplots(1, 1)\n",
    "\n",
    "ax.imshow(\n",
    "    np.angle(s11_data.T), \n",
    "    aspect='auto', origin='lower',\n",
    "    extent=[flux_data.min(), flux_data.max(), frq_data.min(), frq_data.max()]\n",
    ")\n",
    "ax.set_xlabel('Flux (phi_0)')\n",
    "ax.set_ylabel('Frequency (Hz)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "Collapsed": "false"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:qcodes]",
   "language": "python",
   "name": "conda-env-qcodes-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
